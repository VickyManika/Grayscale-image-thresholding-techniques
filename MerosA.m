clc; clear; close all; format compact;

% Ορισμός ονόματος αρχείου εικόνας
Filename='lena_gray.png';
% Διάβασμα εικόνας
I=imread(Filename);

% Δύο πρώτες διαστάσεις της εικόνας -> R:Γραμμές , C:Στήλες
[R,C,~]=size(I);

% Εμφανισή της αρχικής εικόνας και του ιστογράμματος σε μία γραμμή και στην
% πρώτη και δεύτερη στήλη αντίστοιχα
subplot(1,3,1) ,imshow(I) , title 'Original image'
subplot(1,3,2) ,imhist(I) , title 'Histogram'

tic % Αρχή χρονομέτρησης διαδικασίας

% Αρχικοποίηση της τιμής του κατωφλιού
% Το t παίρνει τιμές απο 1 μέχρι 255
t=1; 

% Tιμές του ιστογράμματος
h=imhist(I);

% Πιθανότητα κάθε pixel 
P=h./(R*C); 

% Δημιουργία διανύσματος στήλης με 255 μηδενικά 
MatrixSB=zeros(255,1);

% Αρχικοποίηση των w0,w1,m0,m1
w0=0; % Πιθανότητα κλάσης 0
w1=0; % Πιθανότητα κλασης 1
m0=0; % Μέση τιμή κλάσης 0
m1=0; % μέση τιμή κλάσης 1

% Έναρξή επαναλητπικής διαδικασίας while , όσο το t δεν είναι 255 
while ~(t==256) 

     % Έναρξη επαναληπτηκής διαδικασίας for, για i απο ένα μέχρι 255
    for i=1:255
        % Δημιουργία κλάσεων. Αν το i είναι μικρότερο ή ίσο του t τότε υπολόγισε το w0
        if i<=t
            w0= w0 + P(i);  
         % Αλλιώς υπολόγισε το w1
        else
            w1= w1 + P(i);
         % Τέλος του if   
        end 
     % Τέλος του for   
    end

    % Έναρξη επαναληπτηκής διαδικασίας for, για i απο ένα μέχρι 255
   for i=1:255
       % Δημιουργία κλάσεων. Αν το i είναι μικρότερο ή ίσο του t τότε υπολόγισε το m0
       if i<=t
           m0= m0 + (i*P(i))/w0;
       % Αλλιώς υπολόγισε το m1    
       else
           m1= m1 + (i*P(i))/w1;
        % Τέλος του if   
       end
     % Τέλος του for    
    end 
   
   % Υπολογισμος διασπορας μεταξύ των κλάσεων 
   SB=(w0*w1)*((m0-m1)^2);
   % Εισαγωγή της τιμής του SB στον πινακά του SB
   MatrixSB(t)=SB;
   % Αυξησή του κατωφλιού κατα ένα
   t=t+1;
   % Αρχικοποίηση των τιμών w0,w1,m0,m1 για να υπολογιστούν οι καινούριες
   % τιμές για το επόμενο t
   m0=0;
   m1=0;
   w0=0;
   w1=0;

% Tέλος του while
end

% Εύρεση μεγιστού SB απο τον πίνακα του SB
maximum=find(MatrixSB==(max(MatrixSB))); 

% H τιμή του κατωφλιού μεταξύ του 0 και 1 και η εμφάνισή του στο Command Window 
T=maximum/255; 
disp(['Η τιμή του κατωφλιού είναι : ' num2str(T)]);

% Τιμή του κατώφλιού
x = T * 255;
% Εμφάνιση πλέγματος στο ιστόγραμμα
grid on;
% Aπεικόνιση της γραμμης του κατωφλιού στο ήδη υπάρχων ιστόγραμμα
hold on;
line([x, x], ylim, 'Color', 'magenta', 'LineWidth', 3 );
hold off;

% Μετατροπή της αρχικής εικόνας σε δυαδική με βάση το κατώφλι
% Για κάθε γραμμή της αρχικής εικόνας
for i=1:R
    % Για κάθε στήλη της αρχίκής εικόνας
    for j=1:C
        % Oρίζω ως pixel τα pixel της αρχικής εικόνας
        pixel=I(i,j);
     % Αν το pixel ειναι μικρότερο του κατωφλιόυ    
    if pixel<x
       % Τοτε θέσε το pixel με 0
       pixel=0;
     % Αλλιως θέσε το pixel με 1  
    else
        pixel=1;
    % Τέλος if     
    end
    % Aποθήκευση των καινούριων τιμών των pixel στην δυαδική εικόνα
    BW_IMAGE(i,j)=pixel;
    % Tέλος for
    end
 % Τέλος for  
end

% Eμφάνηση της δυαδικής εικόνας στην ίδια γραμμή και την τρίτη στήλη
subplot(1,3,3) , imshow(BW_IMAGE) , title 'Binary image'

toc % Tέλος χρονομέτρησης διαδικασίας